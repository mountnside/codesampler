//-----------------------------------------------------------------------------
//           Name: stl_vector.cpp
//         Author: Kevin Harris
//  Last Modified: 09/25/04
//    Description: This sample demonstrates how to use STL's vector container 
//                 to store a series of in values.
//-----------------------------------------------------------------------------

#include <iostream>
#include <vector>

using namespace std;

//
// First, let us create a new type, which represents a vector container of chars.
// This step is not really necessary, but it helps to keep our code from 
// becoming too cluttered.
//

typedef vector< int > myVectorType;

void printContents( myVectorType vector );

void main( void )
{
    //
    // Create the initial vector and load it with some char values to work with.
    // Once that's done, print out the contents for inspection.
    //

    myVectorType myVector;

    myVector.push_back( 1 );
    myVector.push_back( 2 );
    myVector.push_back( 3 );
    myVector.push_back( 4 );

    printContents( myVector );

    //
    // Now, let's modify the first and last elements of the vector using 
    // references generated by calls to front() and back().
    //

    myVectorType::reference ref_front = myVector.front();
    myVectorType::reference ref_back  = myVector.back();

    ref_front = 100; // Change the first element from 1 to 100
    ref_back  = 400; // Change the last element from 4 to 400

    printContents( myVector );

    //
    // Ok, let's change them back but this time we'll use iterators instead 
    // reference pointers.
    //
    // Note how we dereference the iterators with * when setting them.
    //

    myVectorType::iterator it_begin = myVector.begin();
    myVectorType::iterator it_end   = myVector.end();

    *it_begin = 1; // Change the first element from 100 to back to 1

    --it_end;
    *it_end   = 4; // Change the last element from 400 to back to 4

    //
    // Whoa...hang on! What's that decrement for?
    //
    // The line above that says "--it_end;" is important because it_end points 
    // to a position which is one past the last element.
    //
    // And since it doesn't point at the last element of myVector, we have to 
    // move it back one position by decrementing it. This will make it actually 
    // point to the last element like we want.
    //

    printContents( myVector );

    //
    // Now, since a vector is a variable-length array we can add elements by 
    // pushing them on to the array's back like so:
    //

    myVector.push_back( 25 );
    myVector.push_back( 75 );

    printContents( myVector );

    //
    // And if you can push elements on, you can also pop them back off like so:
    //

    myVector.pop_back();
    myVector.pop_back();

    printContents( myVector );

    //
    // Of course, if we keep popping the queue, we'll end up with nothing...
    //

    myVector.pop_back();
    myVector.pop_back();

    printContents( myVector );

    myVector.pop_back();
    myVector.pop_back();

    printContents( myVector );
}

void printContents( myVectorType vec )
{
    //
    // Vectors support direct access through the subscripting operator.
    // This is a much easier way of accessing the vector's contents than using
    // iterators.
    //

    cout << "Contents of myVector: ";

    for( int i = 0; i < vec.size(); ++i )
    {
        cout << vec[i] << " " ;
    }

    cout << endl;
}

/*
void printContents( myVectorType vec )
{
    //
    // Using iterators, which point to the beginning and ending of the vector,  
    // we can loop through the vector and print out its contents.
    //
    // This is less intuitive than the using the subscripting operator, which 
    // is used above.
    //

    myVectorType::iterator it_begin = vec.begin();
    myVectorType::iterator it_end   = vec.end();

    cout << "Contents of myVector: ";

    for( ; it_begin != it_end; ++it_begin )
    {
        cout << *it_begin << " " ;
    }

    cout << endl;
}
*/
