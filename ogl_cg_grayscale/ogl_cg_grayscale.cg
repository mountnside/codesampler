struct fragment
{
	float4 position  : POSITION;
	float4 color0    : COLOR0;
	float2 texcoord0 : TEXCOORD0;
};

struct pixel
{
	float4 color : COLOR;
};

//-----------------------------------------------------------------------------
// IN               - Incoming fragment to be processed
// testTexture      - A texture for the pixel shader to use
// grayScaleWeights - Grayscale weights required by the luminance filter
//-----------------------------------------------------------------------------
pixel main( fragment IN,
		    const uniform sampler2D testTexture,
			const uniform float3 grayScaleWeights )
{
	pixel OUT;

	// Fetch the regular RGB texel color from the texture
    float4 texelColor = tex2D( testTexture, IN.texcoord0 );

	//
	// Converting to grayscale:
	//
	// Converting an image to grayscale is done by taking a weighted average of
	// the red, green and blue color components. The standard weights for this 
	// type of conversion are (0.30, 0.59, 0.11). Therefore, the gray component 
	// or luminance that we need to compute can be defined as a luminance 
	// filter like so:
	//
	// luminance = 0.30*R + 0.59*G + 0.11*B
	//
	// If we think of our RGB colors as vectors, we can see that this 
	// calculation is actually just a dot product.
	//

	float4 scaledColor = texelColor * float4( grayScaleWeights, 1.0 );
	float luminance = scaledColor.r + scaledColor.g + scaledColor.b ;

	//
	// Now, even though we want a grayscale color, we still need to output a  
	// three component RGB color. To do this, we'll set each color component  
	// to be the same luminance. This is becuase every value on the grayscale  
	// is always an equal mixture of red, green and blue. For example, pure 
	// white is (1.0,1.0,1.0), pure black is (0.0,0.0,0.0), and a perfectly 
	// middle gray would be (0.5,0.5,0.5).
	//

	OUT.color = float4( luminance, luminance, luminance, texelColor.a );

	return OUT;
}
