struct vertex
{
	float4 position : POSITION;
	float4 color0   : COLOR0;
};

struct fragment
{
	float4 position : POSITION;
	float4 color0   : COLOR0;
};

//-----------------------------------------------------------------------------
// IN            - incoming per-vertex data to be processed
// worldViewProj - combined world-view-projection matrix
// constColor    - constant color
//-----------------------------------------------------------------------------
fragment main( vertex IN,
	           uniform float4x4 worldViewProj,
	           uniform float4 constColor )
{
	fragment OUT;

	// Build-up a float4 from a float3
	float4 tempPosition = float4( IN.position.x,
		                          IN.position.y,
					              IN.position.z,
					              1.0f );

	OUT.position = mul( worldViewProj, tempPosition );

	OUT.color0 = IN.color0; // Use the original per-vertex color specified
    //OUT.color0 = constColor; // Uncomment this to use the color stored in the constColor argument

	return OUT;
}


/*

//
// Here's another way of declaring the same vertex shader...
//

//-----------------------------------------------------------------------------
// position      - incoming position
// color         - incoming color
// positionO     - outgoing position
// colorO        - outgoing color
// worldViewProj - combined world-view-projection matrix
// constColor    - constant color
//-----------------------------------------------------------------------------
void main( in float3 position : POSITION,
           in float4 color : COLOR0,
           out float4 positionO : POSITION,
           out float4 colorO : COLOR0,
           const uniform float4x4 worldViewProj,
           const uniform float4 constColor )
{
	// Build-up a float4 from a float3
	float4 tempPosition = float4( position.x,
		                          position.y,
					              position.z,
					              1.0f );

	positionO = mul( worldViewProj, tempPosition );
	colorO    = color;
	//colorO    = constColor; // Uncomment this to use the color stored in the constColor argument
}

*/